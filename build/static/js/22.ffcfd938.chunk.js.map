{"version":3,"sources":["pages/auth/ResetPassword/ResetPage.tsx","pages/auth/AuthWrapper.tsx"],"names":["ResetPassword","dispatch","useDispatch","token","useSelector","state","auth","resetPasswordToken","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","ResetPasswordSchema","Yup","shape","password","required","oneOf","confirmPassword","resetPasswordFormik","useFormik","initialValues","showPasswordToken","validationSchema","onSubmit","values","a","console","log","resetPassword","sx","width","mb","display","alignItems","component","fontWeight","Fonts","BOLD","fontSize","variant","color","theme","palette","text","primary","SEMI_BOLD","xs","xl","style","textAlign","noValidate","autoComplete","handleSubmit","name","fullWidth","type","placeholder","label","value","onChange","e","setFieldValue","target","InputProps","endAdornment","position","onClick","edge","icon","touched","errors","marginTop","minWidth","REGULAR","textTransform","padding","AuthWrapper","children","flex","flexDirection","justifyContent","maxWidth","minHeight","sm","overflow","lg","backgroundColor","grey","common","white"],"mappings":"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","file":"static/js/22.ffcfd938.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { Fonts } from \"../../../shared/constants/AppEnums\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport AppInfoView from \"../../../@crema/core/AppInfoView\";\r\nimport AuthWrapper from \"../AuthWrapper\";\r\nimport { InputAdornment, IconButton } from \"@mui/material\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { TextField } from \"@mui/material\";\r\nimport {resetPassword} from \"../../../redux/auth/actions\"\r\n\r\nconst ResetPassword = () => {\r\n  const dispatch = useDispatch();\r\n  const token = useSelector((state: any) => state.auth.resetPasswordToken);\r\n  const [showPassword, setShowPassword] = useState(\"password\");\r\n  const changePasswordState = () => {\r\n    if (showPassword === \"password\") {\r\n      setShowPassword(\"text\");\r\n    } else {\r\n      setShowPassword(\"password\");\r\n    }\r\n  };\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(\"password\");\r\n  const changeConfirmPasswordState = () => {\r\n    if (showConfirmPassword === \"password\") {\r\n      setShowConfirmPassword(\"text\");\r\n    } else {\r\n      setShowConfirmPassword(\"password\");\r\n    }\r\n  };\r\n  const ResetPasswordSchema = Yup.object().shape({\r\n    password: Yup.string().required(\"Password is required\")\r\n    .oneOf([Yup.ref('confirmPassword'), null], 'Passwords must match'),\r\n    confirmPassword: Yup.string()\r\n    .required(\"Confirm Password is required\")\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n  });\r\n\r\n  const resetPasswordFormik = useFormik({\r\n    initialValues: {\r\n      password: \"\", \r\n      confirmPassword: \"\",\r\n      showPasswordToken:\"\" \r\n    },\r\n    validationSchema: ResetPasswordSchema,\r\n    onSubmit: async (values) => {   \r\n      console.log(\"formik values\",values)\r\n      await dispatch(\r\n        resetPassword({\r\n          password: values.password, \r\n          confirmPassword: values.confirmPassword, \r\n          token: token, \r\n        })\r\n      );\r\n    },\r\n  });\r\n  \r\n\r\n  return (\r\n    <AuthWrapper>\r\n      <Box sx={{ width: \"100%\" }}>\r\n        <Box\r\n          sx={{\r\n            mb: 5,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n           <Typography\r\n              component=\"h2\"\r\n              sx={{\r\n                fontWeight: Fonts.BOLD,\r\n                fontSize: 30,\r\n                mb: 4,\r\n              }}\r\n            >\r\n              NFT Battle Game\r\n            </Typography>\r\n\r\n        </Box>\r\n        <Typography\r\n          variant=\"h2\"\r\n          component=\"h2\"\r\n          sx={{\r\n            mb: 1.5,\r\n            color: (theme) => theme.palette.text.primary,\r\n            fontWeight: Fonts.SEMI_BOLD,\r\n            fontSize: { xs: 14, xl: 16 },\r\n          }}\r\n        >\r\n         Reset Password\r\n        </Typography>\r\n\r\n        <form\r\n          style={{ textAlign: \"left\" }}\r\n          noValidate\r\n          autoComplete=\"off\"\r\n          onSubmit={resetPasswordFormik.handleSubmit}\r\n        >\r\n          <Box sx={{ mb: { xs: 5, xl: 8 } }}>\r\n          \r\n          </Box>\r\n\r\n          <Box sx={{ mb: { xs: 3, xl: 4 } }}>\r\n            <TextField\r\n              name=\"password\"\r\n              fullWidth\r\n              type={showPassword}\r\n              placeholder=\"password\"\r\n              label=\"Password\"\r\n              value={resetPasswordFormik.values.password}\r\n              onChange={(e: any) => {\r\n                resetPasswordFormik.setFieldValue(\"password\", e.target.value);\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton onClick={changePasswordState} edge=\"end\">\r\n                      <Icon\r\n                       \r\n                        icon={showPassword == \"text\" ? \"eva:eye-fill\" : \"eva:eye-off-fill\"}\r\n                      />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            {resetPasswordFormik.touched.password && resetPasswordFormik.errors.password ? (\r\n              <div style={{ color: \"red\" }}>{resetPasswordFormik.errors.password}</div>\r\n            ) : null}\r\n          </Box>\r\n          <Box sx={{ mb: { xs: 3, xl: 4 } }}>\r\n            <TextField\r\n              name=\"confirmPassword\"\r\n              fullWidth\r\n              type={showConfirmPassword}\r\n              placeholder=\"Retype Password\"\r\n              label=\"Retype Password\"\r\n              value={resetPasswordFormik.values.confirmPassword}\r\n              onChange={(e: any) => {\r\n                resetPasswordFormik.setFieldValue(\"confirmPassword\", e.target.value);\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton onClick={changeConfirmPasswordState} edge=\"end\">\r\n                      <Icon\r\n                       icon={showConfirmPassword == \"text\" ? \"eva:eye-fill\" : \"eva:eye-off-fill\"}\r\n                        // icon={showConfirmPassword ? \"eva:eye-fill\" : \"eye-off-fill\"}\r\n                      />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            {resetPasswordFormik.touched.confirmPassword && resetPasswordFormik.errors.confirmPassword ? (\r\n              <div style={{ color: \"red\" }}>{resetPasswordFormik.errors.confirmPassword}</div>\r\n            ) : null}\r\n          </Box>\r\n\r\n        \r\n\r\n          <div style={{ textAlign: \"center\", marginTop: \"30px\" }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              // disabled={isSubmitting}\r\n              sx={{\r\n                minWidth: 160,\r\n                fontWeight: Fonts.REGULAR,\r\n                fontSize: 16,\r\n                textTransform: \"capitalize\",\r\n                padding: \"4px 16px 8px\",\r\n              }}\r\n            >\r\n             Reset my password\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      \r\n        <AppInfoView />\r\n      </Box>\r\n    </AuthWrapper>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { Fonts } from \"../../shared/constants/AppEnums\";\r\n\r\ninterface AuthWrapperProps {\r\n  children: any;\r\n}\r\n\r\nconst AuthWrapper: React.FC<AuthWrapperProps> = ({ children }) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        flex: 1,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Card\r\n        sx={{\r\n          maxWidth: 900,\r\n          minHeight: { xs: 320, sm: 450 },\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          position: \"relative\",\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            width: { xs: \"100%\", sm: \"50%\", lg: \"40%\" },\r\n            padding: { xs: 5, lg: 10 },\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          {children}\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            width: { xs: \"100%\", sm: \"50%\", lg: \"60%\" },\r\n            position: \"relative\",\r\n            padding: { xs: 5, lg: 10 },\r\n            display: { xs: \"none\", sm: \"flex\" },\r\n            alignItems: { sm: \"center\" },\r\n            justifyContent: { sm: \"center\" },\r\n            flexDirection: { sm: \"column\" },\r\n            backgroundColor: (theme) => theme.palette.grey[900],\r\n            color: (theme) => theme.palette.common.white,\r\n            fontSize: 14,\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              maxWidth: 320,\r\n            }}\r\n          >\r\n            <Typography\r\n              component=\"h2\"\r\n              sx={{\r\n                fontWeight: Fonts.BOLD,\r\n                fontSize: 30,\r\n                mb: 4,\r\n              }}\r\n            >\r\n              Welcome to Admin Panel!\r\n            </Typography>\r\n            <Typography>\r\n              NFT battle game tool is a play-to-earn system that works on the\r\n              Ethereum Blockchain network. Holders who own NFTs registered to\r\n              this game tool could play this game and earn ERC20 tokens.\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AuthWrapper;\r\n"],"sourceRoot":""}
{"version":3,"sources":["shared/helperMethods/Config.js","shared/helperMethods/getNft.tsx","pages/collections/ViewCollection/ViewNft/viewApprovedNft.tsx","pages/collections/ViewCollection/index.tsx"],"names":["tokenInterface","require","module","exports","STAddress","Address","STABI","ABI","Tx","fromAddress","toAddress","gasLimit","data_","from","to","gas","data","DistributerAC","PK","RPCNetwork","Config","W3","network","contractAddress","startRange","endRange","a","ERC721","eth","Contract","objects","i","methods","tokenURI","call","push","getNftImageUri","imagesUri","GetContractName","cN","GetTotalSupply","tS","nftInfo","collectionName","totalSupply","tokenImgUri","GetJson","url","axios","get","name","userAddress","nfts","Data","console","log","length","correctUrl","CorrectMeta","response","correctImageUrl","image","error","Info","slice","substring","owner","ViewApprovedNft","useDispatch","useState","nftListData","setNftListData","count","setCount","handleNft","useSelector","state","collections","collectionAddress","GetAllNft","then","result","useEffect","AppAnimate","animation","delay","Box","Grid","container","map","nft","index","item","xs","lg","sm","AppCard","title","style","padding","margin","innerHeight","alt","src","afterLoad","textAlign","ViewCollections","dispatch","history","useHistory","nftList","display","Button","variant","onClick","action","marginRight","approveCollection","id"],"mappings":"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","file":"static/js/10.146a9b5b.chunk.js","sourcesContent":["//Module Created by Xobi\r\n//Date created 4-1-2019\r\n//Date Updated 11-3-2021--\tNew tx Object merge with this Module and Automatic create tx Object for you\r\n//version 1.4\r\n\r\n//Contract address\r\nconst tokenInterface = require('./TokenInterface.json')\r\n//const rPCNetwork = 'HTTP://127.0.0.1:7545'\r\nconst rPCNetwork =\r\n  'https://speedy-nodes-nyc.moralis.io/99023a036ee87e30f43f4724/eth/mainnet'\r\n//---------------------------------------------\r\nconst DAC = '0xeB48B57c8B0E04DfAfd09465F39614912c8AB67f'\r\nconst privateKey =\r\n  'da498c3f03728e26da2c70d02dffae6fb4828d5367e75cc22dbbb330adefb588'\r\n//---------------------------------------------\r\n\r\nfunction CreateTX(fromAddress, toAddress, gasLimit, data_) {\r\n  const tx = {\r\n    // this could be provider.addresses[0] if it exists\r\n    from: fromAddress,\r\n    // target address, this could be a smart contract address\r\n    to: toAddress,\r\n    // optional if you want to specify the gas limit\r\n    gas: gasLimit,\r\n    // optional if you are invoking say a payable function\r\n    //value: value, //We Don't need the Value attribute\r\n    // this encodes the ABI of the method and the arguements\r\n    //myContract.methods.myMethod(arg, arg2).encodeABI()  sample here to understand\r\n    data: data_,\r\n  }\r\n  return tx\r\n}\r\n\r\nfunction ReturnValidNode(){\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Export Variables list...\r\nmodule.exports.STAddress = tokenInterface.Address\r\nmodule.exports.STABI = tokenInterface.ABI\r\nmodule.exports.Tx = CreateTX\r\nmodule.exports.DistributerAC = DAC\r\nmodule.exports.PK = privateKey\r\nmodule.exports.RPCNetwork = rPCNetwork\r\n","\r\nimport React, { useEffect } from \"react\";\r\nconst Config = require(\"./Config\");\r\nvar w3 = require(\"web3\");\r\nvar W3 = new w3(Config.RPCNetwork);\r\nconst DefaultPinataURI = \"https://gateway.pinata.cloud/ipfs/\";\r\n\r\n\r\n\r\n\r\n\r\n  export default async function GetAllNft(network, contractAddress, startRange, endRange) {\r\n    let ABI = Config.STABI;\r\n    const ERC721 = new W3.eth.Contract(ABI, contractAddress);\r\n    var objects: any = [];\r\n    var tokens: any = [];\r\n    objects = [];\r\n  \r\n    for (var i = startRange; i < endRange; i++) {\r\n      objects.push(await ERC721.methods.tokenURI(i).call());\r\n    }\r\n  \r\n    let imagesUri = await getNftImageUri(objects);\r\n  \r\n    let cN = await GetContractName(\"Eth\", contractAddress);\r\n    let tS = await GetTotalSupply(\"Eth\", contractAddress);\r\n    let nftInfo = { collectionName: cN, totalSupply: tS, tokenImgUri: imagesUri };\r\n    return nftInfo;\r\n  }\r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync function GetJson(url) {\r\n  const axios = require(\"axios\");\r\n  let a = await axios.get(url);\r\n  return a.data;\r\n}\r\n\r\nasync function GetContractName(network, contractAddress) {\r\n\r\n  let ABI = Config.STABI;\r\n  const ERC721 = new W3.eth.Contract(ABI, contractAddress);\r\n  let userAddress = await ERC721.methods.name().call();\r\n  return userAddress;\r\n}\r\n\r\nasync function getNftImageUri(nfts) {\r\n  var Data: any = [];\r\n  console.log(nfts.length);\r\n  for (let i = 0; i < nfts.length; i++) {\r\n    let correctUrl = CorrectMeta(nfts[i]);\r\n    try {\r\n      let response = await GetJson(correctUrl);\r\n\r\n      let correctImageUrl = CorrectMeta(response.image);\r\n      Data.push(correctImageUrl);\r\n    } catch (error) {\r\n      return { error: \"Unable to Process\" };\r\n    }\r\n  }\r\n  return Data;\r\n}\r\n\r\nfunction CorrectMeta(Info) {\r\n  let Sstring = Info.slice(0, -(Info.length - 7));\r\n  if (Sstring == \"ipfs://\") {\r\n    Info = DefaultPinataURI + Info.substring(7);\r\n    return Info;\r\n  } else {\r\n    return Info;\r\n  }\r\n}\r\nasync function GetTotalSupply(network, contractAddress) {\r\n  let ABI = Config.STABI;\r\n  const ERC721 = new W3.eth.Contract(ABI, contractAddress);\r\n  let owner = await ERC721.methods.totalSupply.call().call();\r\n  return owner;\r\n}\r\n\r\n\r\n// GetAllNft('Eth', '0x25C65721E26fa5F3c97f129F4e24972482327BC9', 0,10,\"\",\"\").then(\r\n//   (result) => {\r\n//     console.log(\"results i want to seee\",result)\r\n//   },\r\n// )\r\n\r\n\r\n\r\n","import { FC, useState } from \"react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Box, Grid, TextField, Button } from \"@mui/material\";\r\nimport AppAnimate from \"../../../../@crema/core/AppAnimate\";\r\nimport AppCard from \"@crema/core/AppCard\";\r\nimport GetAllNft from \"../../../../shared/helperMethods/getNft\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\n\r\n\r\nconst ViewApprovedNft = () => {\r\n  const dispatch = useDispatch();\r\n  const [nftListData, setNftListData] = useState<any>([]);\r\n  const [count, setCount] = useState(3);\r\n  const collectionAddress = useSelector(\r\n    (state: any) => state.collections.collectionAddress\r\n  );\r\n  const handleNft = () => {\r\n    GetAllNft(\r\n      \"Eth\",\r\n      \"0x25C65721E26fa5F3c97f129F4e24972482327BC9\",\r\n      0,\r\n      count,\r\n    ).then((result) => {\r\n      setNftListData(result);\r\n      // console.log(\"values iw ant to see\",result)\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    handleNft();\r\n    // console.log(\"this is the value of my count\",count)\r\n  }, [count]);\r\n\r\n \r\n\r\n  return (\r\n    <>\r\n    {/* <p onClick={()=>{\r\n      console.log(\"this is my collectionAddress \",collectionAddress)\r\n    }}>values</p> */}\r\n      <AppAnimate animation=\"transition.slideUpIn\" delay={200}>\r\n        <Box>\r\n          <Grid container>\r\n            {nftListData &&\r\n              nftListData.tokenImgUri &&\r\n              nftListData.tokenImgUri.map((nft: any, index: number) => {\r\n              \r\n                return (\r\n                  <Grid item xs={12} lg={4} sm={6}>\r\n                    <AppCard\r\n                      title={nftListData.collectionName}\r\n                      style={{\r\n                        padding: \"10px\",\r\n                        margin: \"20px\",\r\n                        innerHeight: \"300px\",\r\n                      }}\r\n                    >\r\n                      <LazyLoadImage\r\n                        alt={\"image loading\"}\r\n                        src={nft}\r\n                        afterLoad={() => {\r\n                          // console.log(\"image downloaded\", \"===> \" + index);\r\n                          // if (count < nftListData.totalSupply) {\r\n                            if (count < 100) {\r\n                            setCount(count + 1);\r\n                          }\r\n                        }}\r\n                      />\r\n\r\n                      <Grid style={{ textAlign: \"center\" }}>{nftListData.collectionName}</Grid>\r\n                    </AppCard>\r\n                  </Grid>\r\n                );\r\n              })}\r\n          </Grid>\r\n        </Box>\r\n      </AppAnimate>\r\n\r\n    \r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewApprovedNft;\r\n","import { FC, useState } from \"react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Box, Grid, TextField, Button } from \"@mui/material\";\r\nimport AppAnimate from \"../../../@crema/core/AppAnimate\";\r\nimport ViewApprovedNft from \"../ViewCollection/ViewNft/viewApprovedNft\";\r\nimport {approveCollection} from \"../../../redux/collections/actions\"\r\n\r\nconst ViewCollections = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const collectionAddress = useSelector(\r\n    (state: any) => state.collections.collectionAddress\r\n  );\r\n  const nftList = useSelector((state: any) => state.collections.nftList);\r\n\r\n  return (\r\n    <>\r\n      {/* <p\r\n        onClick={() => {\r\n          console.log(\"collection adress object\", collectionAddress);\r\n        }}\r\n      >\r\n        yellowwwww\r\n      </p> */}\r\n      <div>\r\n        <Box style={{ margin: \"0px 0px 10px 20px\", display: \"flex\" }}>\r\n          <Grid item lg={6}>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => {\r\n                history.push(\"/collections\");\r\n              }}\r\n            >\r\n              Collections\r\n            </Button>\r\n          </Grid>\r\n          {collectionAddress.action == \"Unregistered Collections\" ? (\r\n            <Grid\r\n              item\r\n              lg={6}\r\n              style={{ textAlign: \"right\", marginRight: \"20px\" }}\r\n            >\r\n              <Button variant=\"contained\" onClick={() => {\r\n                dispatch(approveCollection({\r\n                  id:collectionAddress.id\r\n                }))\r\n              }}>\r\n                Approve Collection\r\n              </Button>\r\n            </Grid>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Box>\r\n        <ViewApprovedNft />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewCollections;\r\n"],"sourceRoot":""}